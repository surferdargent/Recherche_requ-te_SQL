-- Sélectionner toutes les colonnes d'une table :
SELECT * FROM nom_de_la_table;

-- Sélectionner des colonnes spécifiques d'une table :
SELECT colonne1, colonne2, colonne3 FROM nom_de_la_table;

-- Sélectionner des lignes spécifiques qui correspondent à un critère :
SELECT * FROM nom_de_la_table WHERE critère = valeur;

-- Ajouter une nouvelle ligne à une table :
INSERT INTO nom_de_la_table (colonne1, colonne2, colonne3) VALUES (valeur1, valeur2, valeur3);

-- Mettre à jour une ou plusieurs colonnes d'une ligne :
UPDATE nom_de_la_table SET colonne1 = nouvelle_valeur WHERE critère = valeur;

-- Supprimer une ou plusieurs lignes d'une table :
DELETE FROM nom_de_la_table WHERE critère = valeur;

-- Joindre deux tables sur une colonne commune :
SELECT * FROM table1 JOIN table2 ON table1.colonne = table2.colonne;

-- Regrouper les données d'une table par colonne et calculer une fonction d'agrégation :
SELECT colonne1, AVG(colonne2) FROM nom_de_la_table GROUP BY colonne1;

-- Sélectionner les données distinctes d'une colonne :
SELECT DISTINCT colonne1 FROM nom_de_la_table;

-- Trier les résultats d'une requête par ordre croissant ou décroissant :
SELECT * FROM nom_de_la_table ORDER BY colonne1 ASC/DESC;

-- Utiliser une sous-requête pour filtrer les résultats :
SELECT * FROM nom_de_la_table WHERE colonne1 IN (SELECT colonne2 FROM nom_de_la_table2);

-- Calculer une somme ou une moyenne d'une colonne :
SELECT SUM(colonne1) FROM nom_de_la_table;
SELECT AVG(colonne2) FROM nom_de_la_table;

-- Compter le nombre de lignes dans une table :
SELECT COUNT(*) FROM nom_de_la_table;

-- Utiliser des opérateurs logiques pour combiner plusieurs critères de sélection :
SELECT * FROM nom_de_la_table WHERE colonne1 = valeur1 AND colonne2 > valeur2;

-- Utiliser une clause LIMIT pour limiter le nombre de résultats renvoyés :
SELECT * FROM nom_de_la_table LIMIT 10;

-- Utiliser des fonctions de date et d'heure pour filtrer les résultats par intervalles de temps :
SELECT * FROM nom_de_la_table WHERE date_colonne >= '2022-01-01' AND date_colonne <= '2022-12-31';
SELECT * FROM nom_de_la_table WHERE heure_colonne BETWEEN '10:00:00' AND '14:00:00';

-- Utiliser une clause HAVING pour filtrer les résultats d'une fonction d'agrégation :
SELECT colonne1, AVG(colonne2) FROM nom_de_la_table GROUP BY colonne1 HAVING AVG(colonne2) > 10;

-- Utiliser une fonction de chaîne pour rechercher des résultats par mot-clé :
SELECT * FROM nom_de_la_table WHERE LOWER(colonne1) LIKE '%mot-clé%';

-- Utiliser une clause ORDER BY pour trier les résultats par plusieurs colonnes :
SELECT * FROM nom_de_la_table ORDER BY colonne1 ASC, colonne2 DESC;

-- Utiliser une jointure externe pour inclure toutes les lignes d'une table, même celles qui n'ont pas de correspondance dans l'autre table :
SELECT * FROM table1 LEFT JOIN table2

-- Utiliser une clause GROUP BY pour regrouper les résultats par colonne :
SELECT colonne1, COUNT(*) FROM nom_de_la_table GROUP BY colonne1;

-- Utiliser des fonctions mathématiques pour calculer des valeurs à partir des données de la table :
SELECT colonne1, colonne2 * 2 FROM nom_de_la_table;

-- Utiliser une clause DISTINCT pour sélectionner des valeurs uniques d'une colonne :
SELECT DISTINCT colonne1 FROM nom_de_la_table;

-- Utiliser des opérateurs logiques pour combiner plusieurs critères de sélection :
SELECT * FROM nom_de_la_table WHERE colonne1 = valeur1 AND colonne2 > valeur2;

-- Utiliser des fonctions de chaîne pour manipuler des données de texte :
SELECT UPPER(colonne1) FROM nom_de_la_table;
SELECT CONCAT(colonne1, ' - ', colonne2) FROM nom_de_la_table;

-- Utiliser des expressions régulières pour rechercher des motifs dans des données de texte :
SELECT * FROM nom_de_la_table WHERE colonne1 REGEXP 'motif';

-- Utiliser des jointures imbriquées pour accéder à des données de plusieurs tables :
SELECT * FROM (SELECT * FROM table1 WHERE critère = valeur) AS t1 JOIN table2 ON t1.colonne = table2.colonne;

-- Utiliser des clauses UNION et UNION ALL pour combiner les résultats de plusieurs requêtes :
SELECT colonne1 FROM table1 UNION SELECT colonne2 FROM table2;
SELECT colonne1 FROM table1 UNION ALL SELECT colonne2 FROM table2;

-- Utiliser une fonction CASE pour effectuer une sélection conditionnelle :
SELECT colonne1, CASE WHEN colonne2 > 10 THEN 'Grand' ELSE 'Petit' END FROM nom_de_la_table;

-- Utiliser des sous-requêtes pour calculer des valeurs à partir des résultats d'une requête :
SELECT colonne1, (SELECT COUNT(*) FROM table2 WHERE table2.colonne = table1.colonne) FROM table1;

-- Utiliser des fonctions de conversion de données pour modifier le type de données d'une colonne :
SELECT CAST(colonne1 AS INT) FROM nom_de_la_table;

-- Utiliser des fonctions d'agrégation pour calculer des valeurs statistiques :
SELECT MIN(colonne1), MAX(colonne1), AVG(colonne2), SUM(colonne3) FROM nom_de_la_table;

-- Utiliser des fonctions de date et d'heure pour extraire des éléments d'une date ou d'une heure :
SELECT YEAR(date_colonne), MONTH(date_colonne), DAY(date_colonne), HOUR(heure_colonne), MINUTE(heure_colonne), SECOND(heure_colonne) FROM nom_de_la_table;

-- Utiliser une clause BETWEEN pour filtrer les résultats entre deux valeurs :
SELECT * FROM nom_de_la_table WHERE colonne1 BETWEEN valeur1 AND valeur2;

-- Utiliser des opérateurs LIKE et NOT LIKE pour rechercher des valeurs partielles :
SELECT * FROM nom_de_la_table WHERE colonne1 LIKE '%valeur%';
SELECT * FROM nom_de_la_table WHERE colonne2 NOT LIKE 'valeur%';

-- Utiliser des fonctions d'agrégation pour calculer des pourcentages :
SELECT colonne1, COUNT(*) AS total, COUNT(*) * 100 / (SELECT COUNT(*) FROM nom_de_la_table) AS pourcentage FROM nom_de_la_table GROUP BY colonne1;

-- Utiliser des fonctions d'agrégation pour calculer des pourcentages :
SELECT colonne1, COUNT(*) AS total, COUNT(*) * 100 / (SELECT COUNT(*) FROM nom_de_la_table) AS pourcentage FROM nom_de_la_table GROUP BY colonne1;

-- Utiliser des fonctions de fenêtre pour calculer des totaux cumulatifs :
SELECT colonne1, colonne2, SUM(colonne2) OVER (ORDER BY colonne1) AS total_cumulatif FROM nom_de_la_table;

-- Utiliser des fonctions de fenêtre pour calculer des rangs ou des pourcentages :
SELECT colonne1, colonne2, RANK() OVER (ORDER BY colonne2 DESC) AS rang FROM nom_de_la_table;
SELECT colonne1, colonne2, PERCENT_RANK() OVER (ORDER BY colonne2 DESC) AS pourcentage_rang FROM nom_de_la_table;

-- Utiliser des fonctions de fenêtre pour filtrer les résultats en fonction du rang ou de la position :
SELECT * FROM (SELECT colonne1, colonne2, RANK() OVER (ORDER BY colonne2 DESC) AS rang FROM nom_de_la_table) AS t WHERE rang <= 10;

-- Utiliser des fonctions de fenêtre pour calculer des différences entre des valeurs :
SELECT colonne1, colonne2, colonne2 - LAG(colonne2, 1) OVER (ORDER BY colonne1) AS difference FROM nom_de_la_table;

-- Utiliser des fonctions d'agrégation pour calculer des valeurs pondérées :
SELECT colonne1, SUM(colonne2 * poids_colonne) / SUM(poids_colonne) AS valeur_pondérée FROM nom_de_la_table GROUP BY colonne1;

-- Utiliser une jointure auto-referencée pour accéder à des données dans la même table :
SELECT t1.colonne1, t1.colonne2, t2.colonne2 FROM nom_de_la_table AS t1 JOIN nom_de_la_table AS t2 ON t1.colonne1 = t2.colonne1 AND t2.colonne2 > t1.colonne2;

-- Utiliser des fonctions de fenêtre pour calculer des moyennes mobiles ou des sommes cumulatives :
SELECT colonne1, colonne2, AVG(colonne2) OVER (ORDER BY colonne1 ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS moyenne_mobile FROM nom_de_la_table;
SELECT colonne1, colonne2, SUM(colonne2) OVER (ORDER BY colonne1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS somme_cumulative FROM nom_de_la_table;

-- Utiliser des fonctions de fenêtre pour calculer des pourcentages de lignes ou de colonnes :
SELECT colonne1, colonne2, colonne2 / SUM(colonne2) OVER (PARTITION BY colonne1) * 100 AS pourcentage_ligne FROM nom_de_la_table;
SELECT colonne1, colonne2, colonne2 / SUM(colonne2) OVER () * 100 AS pourcentage_colonne FROM nom_de_la_table;

-- Utiliser des fonctions de fenêtre pour filtrer les résultats en fonction d'un critère sur le nombre de lignes ou de colonnes :
SELECT colonne1, colonne2 FROM (SELECT colonne1, colonne2, COUNT(*) OVER (PARTITION BY colonne1) AS nb_lignes FROM nom_de_la_table) AS t WHERE

-- Utiliser des fonctions de fenêtre pour filtrer les résultats en fonction d'un critère sur le nombre de lignes ou de colonnes (suite) :
SELECT colonne1, colonne2 FROM (SELECT colonne1, colonne2, COUNT(*) OVER (PARTITION BY colonne1) AS nb_lignes FROM nom_de_la_table) AS t WHERE nb_lignes > 10;

-- Utiliser des fonctions de fenêtre pour calculer des moyennes mobiles pondérées :
SELECT colonne1, colonne2, AVG(colonne2 * poids_colonne) OVER (ORDER BY colonne1 ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS moyenne_mobile FROM nom_de_la_table;

-- Utiliser des fonctions de fenêtre pour calculer des taux de croissance :
SELECT colonne1, colonne2, colonne2 / LAG(colonne2, 1) OVER (ORDER BY colonne1) * 100 - 100 AS taux_croissance FROM nom_de_la_table;

-- Utiliser des fonctions de fenêtre pour calculer des différences de rang :
SELECT colonne1, colonne2, RANK() OVER (ORDER BY colonne2) - RANK() OVER (PARTITION BY colonne1 ORDER BY colonne2) AS difference_rang FROM nom_de_la_table;

-- Utiliser une clause FULL OUTER JOIN pour inclure toutes les lignes de deux tables :
SELECT * FROM table1 FULL OUTER JOIN table2 ON table1.colonne = table2.colonne;

-- Utiliser une clause EXISTS pour vérifier l'existence d'un enregistrement dans une autre table :
SELECT * FROM nom_de_la_table1 WHERE EXISTS (SELECT * FROM nom_de_la_table2 WHERE nom_de_la_table1.colonne1 = nom_de_la_table2.colonne1);

-- Utiliser une clause NOT EXISTS pour vérifier l'inexistence d'un enregistrement dans une autre table :
SELECT * FROM nom_de_la_table1 WHERE NOT EXISTS (SELECT * FROM nom_de_la_table2 WHERE nom_de_la_table1.colonne1 = nom_de_la_table2.colonne1);

-- Utiliser une clause CASE pour effectuer des calculs conditionnels :
SELECT colonne1, colonne2, CASE WHEN colonne2 > 100 THEN colonne2 * 1.1 ELSE colonne2 END AS colonne3 FROM nom_de_la_table;

-- Utiliser une clause CASE pour effectuer des regroupements personnalisés :
SELECT colonne1, COUNT(*) AS total, SUM(CASE WHEN colonne2 > 10 THEN 1 ELSE 0 END) AS grand, SUM(CASE WHEN colonne2 <= 10 THEN 1 ELSE 0 END) AS petit FROM nom_de_la_table GROUP BY colonne1;

-- Utiliser une clause HAVING pour filtrer les résultats après l'application d'une fonction d'agrégation :
SELECT colonne1, AVG(colonne2) AS moyenne FROM nom_de_la_table GROUP BY colonne1 HAVING moyenne > 10;

-- Utiliser des expressions de table commune pour simplifier des requêtes complexes :
WITH cte1 AS (SELECT * FROM nom_de_la_table WHERE colonne1 = valeur1),
     cte2 AS (SELECT * FROM nom_de_la_table WHERE colonne2 > valeur2)
SELECT * FROM cte1 JOIN cte2 ON cte1.colonne1 = cte2.colonne1;

-- Utiliser une clause OFFSET pour paginer les résultats :
SELECT * FROM nom_de_la_table LIMIT 10 OFFSET 20;

-- Utiliser une clause WITH RECURSIVE pour effectuer des requêtes récursives :
WITH RECURSIVE cte AS (
  SELECT colonne1, colonne2, 1 AS niveau FROM nom_de_la_table WHERE colonne1 = valeur1
  UNION ALL
  SELECT nom_de_la_table.colonne1, nom_de_la_table.colonne2, niveau + 1 FROM nom_de_la_table JOIN cte ON nom_de_la_table.colonne1 = cte.colonne1
)
SELECT colonne1, colonne2, niveau FROM cte;

-- Utiliser des expressions de table commune pour éviter la répétition de sous-requêtes :
WITH cte AS (SELECT colonne1, COUNT(*) AS total FROM nom_de_la_table GROUP BY colonne1)
SELECT nom_de_la_table.colonne1, nom_de_la_table.colonne2, cte.total FROM nom_de_la_table JOIN cte ON nom_de_la_table.colonne1 = cte.colonne1;

-- Utiliser une clause PARTITION BY pour effectuer des agrégations par groupe :
SELECT colonne1, colonne2, AVG(colonne2) OVER (PARTITION BY colonne1) AS moyenne FROM nom_de_la_table;

-- Utiliser une clause FOR UPDATE pour verrouiller les enregistrements lors d'une mise à jour :
SELECT * FROM nom_de_la_table WHERE colonne1 = valeur1 FOR UPDATE;

-- Utiliser une clause RETURNING pour retourner les enregistrements mis à jour ou insérés :
UPDATE nom_de_la_table SET colonne2 = valeur2 WHERE colonne1 = valeur1 RETURNING *;
INSERT INTO nom_de_la_table (colonne1, colonne2) VALUES (valeur1, valeur2) RETURNING *;

-- Utiliser une clause TRUNCATE pour vider une table :
TRUNCATE TABLE nom_de_la_table;

-- Utiliser une clause ORDER BY pour trier les résultats en fonction de plusieurs colonnes :
SELECT * FROM nom_de_la_table ORDER BY colonne1, colonne2;

-- Utiliser une clause GROUPING SETS pour effectuer des agrégations sur plusieurs groupes de colonnes :
SELECT colonne1, colonne2, COUNT(*) FROM nom_de_la_table GROUP BY GROUPING SETS ((colonne1), (colonne2), ());

-- Utiliser une clause PIVOT pour effectuer une transformation de table pivot :
SELECT * FROM nom_de_la_table PIVOT (SUM(colonne2) FOR colonne1 IN (valeur1, valeur2, valeur3));

-- Utiliser une clause UNPIVOT pour effectuer une transformation de table unpivot :
SELECT colonne1, colonne2 FROM nom_de_la_table UNPIVOT (colonne2 FOR colonne1 IN (valeur1, valeur2, valeur3));

-- Utiliser des expressions de table commune pour simplifier des requêtes imbriquées :
WITH cte1 AS (SELECT colonne1, colonne2 FROM nom_de_la_table WHERE colonne1 = valeur1),
     cte2 AS (SELECT colonne1, AVG(colonne2) AS moyenne FROM cte1 GROUP BY colonne1)
SELECT * FROM cte1 JOIN cte2 ON cte1.colonne1 = cte2.colonne1;

-- FDFDDDDF :
SELECT COLONNES 1 FROM TABLE A;



